(define (problem test6)
    (:requirements :strips :fluents)
    (:domain travel-strips)
    (:objects c1 c2 c3 c4 c5 c6  - city
              h1 h2 h3 h4 h5 h6  - hotel)
    (:init  (connected c1 c3) (connected c1 c5) (connected c2 c1) 
            (connected c2 c3) (connected c2 c4) (connected c2 c6) 
            (connected c4 c1) (connected c4 c3) (connected c4 c5) 
            (connected c5 c2) (connected c5 c3) (connected c5 c6) 
            (connected c6 c1) (connected c6 c3) (connected c6 c4) 
            (hotel-in h1 c1) (hotel-in h2 c2) (hotel-in h3 c3) 
            (hotel-in h4 c4) (hotel-in h5 c5) (hotel-in h6 c6) 
            (not-visited c1) (not-visited c2) (not-visited c3) 
            (not-visited c4) (not-visited c5) (not-visited c6) 
            (= (price c1 c3) 45) (= (price c1 c5) 81) (= (price c2 c1) 9) 
            (= (price c2 c3) 32) (= (price c2 c4) 75) (= (price c2 c6) 48) 
            (= (price c4 c1) 95) (= (price c4 c3) 33) (= (price c4 c5) 13) 
            (= (price c5 c2) 63) (= (price c5 c3) 85) (= (price c5 c6) 50) 
            (= (price c6 c1) 3) (= (price c6 c3) 15) (= (price c6 c4) 39) 
            (= (price-hotel h1 c1) 100) (= (price-hotel h2 c2) 49) (= (price-hotel h3 c3) 99) 
            (= (price-hotel h4 c4) 3) (= (price-hotel h5 c5) 23) (= (price-hotel h6 c6) 99) 
            (not-started) (= (min-days) 1) (= (max-days) 1) (= (spent-days) 0) (= (min-days-viatge) 6) (= (cost-travel) 0)(= (min-cost-travel) 100) (= (max-cost-travel) 10000 )
    )
    (:goal (and (>= (cost-travel) (min-cost-travel)) (<= (min-days-viatge) 0)))
    (:metric minimize (cost-travel))
)
